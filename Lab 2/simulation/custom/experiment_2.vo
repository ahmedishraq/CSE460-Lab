// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 8.1 Build 163 10/28/2008 SJ Web Edition"

// DATE "10/18/2022 16:27:10"

// 
// Device: Altera EPF10K30ETC144-1 Package TQFP144
// 

// 
// This Verilog file should be used for Custom Verilog HDL only
// 

`timescale 1 ps/ 1 ps

module experiment_2 (
	w,
	y);
input 	[3:0] w;
output 	[1:0] y;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("experiment_2_v.sdo");
// synopsys translate_on

wire \Decoder1~18_combout ;
wire \WideOr0~15_combout ;
wire [3:0] \w~dataout ;


// atom is at PIN_126
flex10ke_io \w[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\w~dataout [1]),
	.padio(w[1]));
// synopsys translate_off
defparam \w[1]~I .feedback_mode = "from_pin";
defparam \w[1]~I .operation_mode = "input";
defparam \w[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_124
flex10ke_io \w[3]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\w~dataout [3]),
	.padio(w[3]));
// synopsys translate_off
defparam \w[3]~I .feedback_mode = "from_pin";
defparam \w[3]~I .operation_mode = "input";
defparam \w[3]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC4_D22
flex10ke_lcell \Decoder1~18 (
// Equation(s):
// \Decoder1~18_combout  = \w~dataout [1] # \w~dataout [3]

	.dataa(vcc),
	.datab(vcc),
	.datac(\w~dataout [1]),
	.datad(\w~dataout [3]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\Decoder1~18_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \Decoder1~18 .clock_enable_mode = "false";
defparam \Decoder1~18 .lut_mask = "fff0";
defparam \Decoder1~18 .operation_mode = "normal";
defparam \Decoder1~18 .output_mode = "comb_only";
defparam \Decoder1~18 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_54
flex10ke_io \w[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\w~dataout [0]),
	.padio(w[0]));
// synopsys translate_off
defparam \w[0]~I .feedback_mode = "from_pin";
defparam \w[0]~I .operation_mode = "input";
defparam \w[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC2_D31
flex10ke_lcell \WideOr0~15 (
// Equation(s):
// \WideOr0~15_combout  = \w~dataout [1] # \w~dataout [0] & !\w~dataout [3]

	.dataa(vcc),
	.datab(\w~dataout [1]),
	.datac(\w~dataout [0]),
	.datad(\w~dataout [3]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\WideOr0~15_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \WideOr0~15 .clock_enable_mode = "false";
defparam \WideOr0~15 .lut_mask = "ccfc";
defparam \WideOr0~15 .operation_mode = "normal";
defparam \WideOr0~15 .output_mode = "comb_only";
defparam \WideOr0~15 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_56
flex10ke_io \w[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(w[2]));
// synopsys translate_off
defparam \w[2]~I .feedback_mode = "from_pin";
defparam \w[2]~I .operation_mode = "input";
defparam \w[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_21
flex10ke_io \y[0]~I (
	.datain(\Decoder1~18_combout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(y[0]));
// synopsys translate_off
defparam \y[0]~I .feedback_mode = "none";
defparam \y[0]~I .operation_mode = "output";
defparam \y[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_20
flex10ke_io \y[1]~I (
	.datain(!\WideOr0~15_combout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(y[1]));
// synopsys translate_off
defparam \y[1]~I .feedback_mode = "none";
defparam \y[1]~I .operation_mode = "output";
defparam \y[1]~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
