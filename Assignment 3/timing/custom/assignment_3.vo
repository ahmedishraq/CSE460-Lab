// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 8.1 Build 163 10/28/2008 SJ Web Edition"

// DATE "11/01/2022 04:03:44"

// 
// Device: Altera EPF10K30ETC144-1 Package TQFP144
// 

// 
// This Verilog file should be used for Custom Verilog HDL only
// 

`timescale 1 ps/ 1 ps

module assignment_3 (
	clk,
	reset,
	w1,
	w2,
	z,
	current_state,
	next_state);
input 	clk;
input 	reset;
input 	w1;
input 	w2;
output 	z;
output 	current_state;
output 	next_state;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("assignment_3_v.sdo");
// synopsys translate_on



// atom is at PIN_56
flex10ke_io \clk~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(clk));
// synopsys translate_off
defparam \clk~I .feedback_mode = "from_pin";
defparam \clk~I .operation_mode = "input";
defparam \clk~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_54
flex10ke_io \reset~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(reset));
// synopsys translate_off
defparam \reset~I .feedback_mode = "from_pin";
defparam \reset~I .operation_mode = "input";
defparam \reset~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_124
flex10ke_io \w1~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(w1));
// synopsys translate_off
defparam \w1~I .feedback_mode = "from_pin";
defparam \w1~I .operation_mode = "input";
defparam \w1~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_126
flex10ke_io \w2~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(w2));
// synopsys translate_off
defparam \w2~I .feedback_mode = "from_pin";
defparam \w2~I .operation_mode = "input";
defparam \w2~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_48
flex10ke_io \z~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(z));
// synopsys translate_off
defparam \z~I .feedback_mode = "none";
defparam \z~I .operation_mode = "output";
defparam \z~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_110
flex10ke_io \current_state~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(current_state));
// synopsys translate_off
defparam \current_state~I .feedback_mode = "none";
defparam \current_state~I .operation_mode = "output";
defparam \current_state~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_73
flex10ke_io \next_state~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(next_state));
// synopsys translate_off
defparam \next_state~I .feedback_mode = "none";
defparam \next_state~I .operation_mode = "output";
defparam \next_state~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
